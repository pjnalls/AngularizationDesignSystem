{
    "pipes": [],
    "interfaces": [
        {
            "name": "Todo",
            "id": "interface-Todo-84a77f5d6c5dc537456c3afe7d9d479c",
            "file": "src/app/Todo.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Todo {\n  id: number;\n  text: string;\n  day: string;\n  added?: boolean;\n  top?: boolean;\n}\n",
            "properties": [
                {
                    "name": "added",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "day",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "top",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "TodoService",
            "id": "injectable-TodoService-1af5c770e85f93e5cadfc86b9af767da",
            "file": "src/app/services/todo.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TodoService {\n  constructor() {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        },
        {
            "name": "UiService",
            "id": "injectable-UiService-ffca469ba10577fa1a5808cc39dfd037",
            "file": "src/app/services/ui.service.ts",
            "properties": [
                {
                    "name": "showAddTodo",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "subject",
                    "defaultValue": "new Subject<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "onToggle",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleAddTodo",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UiService {\n  private showAddTodo: boolean = false;\n  private subject = new Subject<any>();\n\n  constructor() {}\n\n  toggleAddTodo(): void {\n    this.showAddTodo = !this.showAddTodo;\n    this.subject.next(this.showAddTodo);\n  }\n\n  onToggle(): Observable<any> {\n    return this.subject.asObservable();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-ee2067dfb1c303f41003aea7d82d51e0",
            "file": "e2e/src/app.po.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  async navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl);\n  }\n\n  async getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText();\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ]
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<>",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-9095fe7c6c2b318e1d1d91df834e80d9",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "appType",
                    "defaultValue": "'TODOs'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "brand",
                    "defaultValue": "'Aº'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "todos",
                    "defaultValue": "TODOS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Todo[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { TODOS } from './mock-todos';\nimport { Todo } from './Todo';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n  brand: string = 'Aº';\n  appType: string = 'TODOs';\n  todos: Todo[] = TODOS;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'config';\r\n\r\nbody.app, * {\r\n  background: linear-gradient(\r\n    to top,\r\n    rgba($dark, 1),\r\n    rgba($tertiary-color, 1)\r\n  );\r\n}",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"container\">\n  <app-title [brand]=\"brand\" [appType]=\"appType\"></app-title>\n  <app-todo-list [todos]=\"todos\"></app-todo-list>\n  <app-form [todos]=\"todos\"></app-form>\n</div>\n"
        },
        {
            "name": "FormButtonComponent",
            "id": "component-FormButtonComponent-76a7139322ff9ff52984281c536e5e79",
            "file": "src/app/components/form-button/form-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-form-button",
            "styleUrls": [
                "./form-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "onAddTodo",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "EventEmitter<Todo>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAdd",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport type { Todo } from 'src/app/Todo';\n\n@Component({\n  selector: 'app-form-button',\n  templateUrl: './form-button.component.html',\n  styleUrls: ['./form-button.component.scss'],\n})\nexport class FormButtonComponent implements OnInit {\n  @Output() onAddTodo: EventEmitter<Todo> = new EventEmitter();\n\n  constructor() {}\n\n  ngOnInit(): void {}\n\n  onAdd() {\n    this.onAddTodo.emit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"./../../config\";\r\n\r\n.form-button {\r\n  border: 0;\r\n  color: $tertiary-color;\r\n  background: $text-color-primary;\r\n  font-size: 1rem;\r\n  margin: 0 0.25rem 0 0.5rem;\r\n  font-weight: 700;\r\n  width: 7.5rem;\r\n  padding: 0.5rem 0;\r\n  border: solid 2px $tertiary-color;\r\n  border-radius: 0.225rem;\r\n}\r\n\r\n.form-button:hover {\r\n  background: $text-color-secondary;\r\n  border-color: #000;\r\n  color: #000;\r\n  cursor: pointer;\r\n  @include transition-ease;\r\n}\r\n",
                    "styleUrl": "./form-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<button type=\"submit\" class=\"form-button\" (click)=\"onAdd()\">ADD TODO</button>\n"
        },
        {
            "name": "FormComponent",
            "id": "component-FormComponent-b937fcf1da3fda5942a266993ebe3ff8",
            "file": "src/app/components/form/form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-form",
            "styleUrls": [
                "./form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "todos",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "Todo[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "text",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "addTodo",
                    "args": [
                        {
                            "name": "todo",
                            "type": "Todo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "todo",
                            "type": "Todo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formatAMPM",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateInputText",
                    "args": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { Todo } from 'src/app/Todo';\n\n@Component({\n  selector: 'app-form',\n  templateUrl: './form.component.html',\n  styleUrls: ['./form.component.scss'],\n})\nexport class FormComponent implements OnInit {\n  @Input() todos: Todo[] = [];\n\n  text: string = '';\n\n  constructor() {}\n\n  ngOnInit(): void {}\n\n  onSubmit() {\n    const dateTime = new Date();\n\n    const newTodo: Todo = {\n      id: this.todos.length + 1,\n      text: this.text,\n      day: `${\n        dateTime.getMonth() + 1\n      }/${dateTime.getDate()} @ ${this.formatAMPM(dateTime)}`,\n      added: true,\n    };\n\n    this.addTodo(newTodo);\n  }\n\n  addTodo(todo: Todo) {\n    /**\n     * Give CSS some time to play delete animation.\n     */\n    this.todos.push(todo);\n  }\n\n  updateInputText(text: string) {\n    this.text = text;\n  }\n\n  formatAMPM(date: Date) {\n    let hours = date.getHours(),\n      minutes: any = date.getMinutes(),\n      ampm = hours >= 12 ? 'PM' : 'AM';\n\n    hours = hours % 12;\n    hours = hours ? hours : 12;\n    minutes = minutes < 10 ? `0${minutes}` : minutes;\n\n    return `${hours}:${minutes} ${ampm}`;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../config\";\r\n\r\n.form {\r\n  overflow: hidden;\r\n  position: sticky;\r\n  width: 100%;\r\n  bottom: 0;\r\n  height: 5rem;\r\n  background: linear-gradient(\r\n    to bottom,\r\n    rgba($secondary-color, 1),\r\n    rgba($primary-color, 1)\r\n  );\r\n\r\n  .form-control {\r\n    width: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n\r\n  font-size: 2rem;\r\n  padding: 1rem 1rem;\r\n  margin-bottom: 0;\r\n  font-weight: 300;\r\n}\r\n",
                    "styleUrl": "./form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form class=\"form\" (ngSubmit)=\"onSubmit()\">\n  <div class=\"form-control\">\n    <app-form-input (onChangedInput)=\"updateInputText($event)\"></app-form-input>\n    <app-form-button></app-form-button>\n  </div>\n</form>\n"
        },
        {
            "name": "FormInputComponent",
            "id": "component-FormInputComponent-57480579f17072c907954195e4b57e28",
            "file": "src/app/components/form-input/form-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-form-input",
            "styleUrls": [
                "./form-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form-input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "onChangedInput",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "text",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'app-form-input',\n  templateUrl: './form-input.component.html',\n  styleUrls: ['./form-input.component.scss'],\n})\nexport class FormInputComponent {\n  @Output() onChangedInput: EventEmitter<string> = new EventEmitter();\n  text: string = '';\n\n  onChange(event: any) {\n    this.onChangedInput.emit(event.target.value);\n  }\n\n  constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"./../../config\";\r\n\r\n.form-input {\r\n  text-decoration: none;\r\n  background-color: transparent;\r\n  border: 0;\r\n  border-bottom: solid 2px $text-color-primary;\r\n  color: $text-color-secondary;\r\n  font-size: 1rem;\r\n  padding: 0.5rem 1rem;\r\n  margin: 0 1rem 0 0.25rem;\r\n  width: calc(100vw - 11rem);\r\n}\r\n\r\n::placeholder {\r\n  color: $text-color-disabled;\r\n}\r\n\r\ninput:valid {\r\n  border-bottom: solid 2px #88ffcc;\r\n  color: $text-color-secondary;\r\n  @include transition-ease;\r\n}",
                    "styleUrl": "./form-input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "templateData": "<input\n  type=\"text\"\n  class=\"form-input\"\n  name=\"text\"\n  id=\"text\"\n  placeholder=\"Add a to-do.\"\n  (change)=\"onChange($event)\"\n  autocomplete=\"off\"\n  required\n  minlength=\"1\"\n  maxlength=\"280\"\n/>\n"
        },
        {
            "name": "TitleComponent",
            "id": "component-TitleComponent-23a5276c16a6dc9b17fa8eb0d70a31e8",
            "file": "src/app/components/title/title.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-title",
            "styleUrls": [
                "./title.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./title.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "appType",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string"
                },
                {
                    "name": "brand",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-title',\n  templateUrl: './title.component.html',\n  styleUrls: ['./title.component.scss']\n})\nexport class TitleComponent implements OnInit {\n\n  @Input() brand: string = '';\n  @Input() appType: string = '';\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../config\";\r\n\r\n.title {\r\n  overflow: hidden;\r\n  position: sticky;\r\n  top: 0;\r\n  width: 100vw;\r\n  height: 4rem;\r\n  background: linear-gradient(\r\n    to bottom,\r\n    rgba($primary-color, 1),\r\n    rgba($secondary-color, 1)\r\n  );\r\n\r\n  &__name {\r\n    font-size: 2rem;\r\n    padding: 1rem 1rem;\r\n    margin-bottom: 0;\r\n    font-weight: 300;\r\n  }\r\n\r\n  &__brand {\r\n    font-weight: 700;\r\n  }\r\n\r\n  &__app-type {\r\n    color: $text-color-secondary;\r\n  }\r\n}\r\n",
                    "styleUrl": "./title.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"title\">\n  <h2 class=\"title__name\">\n    <span class=\"title__brand\">{{ brand }}</span\n    ><span class=\"title__app-type\"> {{ appType }}</span>\n  </h2>\n</div>\n"
        },
        {
            "name": "TodoComponent",
            "id": "component-TodoComponent-874ffdfb71249f961e1142b978cd05e9",
            "file": "src/app/components/todo/todo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-todo",
            "styleUrls": [
                "./todo.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./todo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "todo",
                    "defaultValue": "{\n    id: 0,\n    text: '',\n    day: '',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "Todo"
                },
                {
                    "name": "todos",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "Todo[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "onDeleteTodo",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter<Todo>"
                },
                {
                    "name": "onToggleReminder",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter<Todo>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "animationIsDelayed",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "deleteBtnClicked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDelete",
                    "args": [
                        {
                            "name": "todo",
                            "type": "Todo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "todo",
                            "type": "Todo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, Output, EventEmitter } from '@angular/core';\nimport type { Todo } from 'src/app/Todo';\n\n@Component({\n  selector: 'app-todo',\n  templateUrl: './todo.component.html',\n  styleUrls: ['./todo.component.scss'],\n})\nexport class TodoComponent implements OnInit {\n  @Input() todo: Todo = {\n    id: 0,\n    text: '',\n    day: '',\n  };\n  @Input() todos: Todo[] = [];\n\n  @Output() onDeleteTodo: EventEmitter<Todo> = new EventEmitter();\n  @Output() onToggleReminder: EventEmitter<Todo> = new EventEmitter();\n\n  deleteBtnClicked: boolean = false;\n  animationIsDelayed: boolean = false;\n\n  constructor() {}\n\n  ngOnInit(): void {\n    setTimeout(() => {\n      this.animationIsDelayed = true;\n    }, 100);\n  }\n\n  onDelete(todo: Todo) {\n    this.deleteBtnClicked = true;\n    this.onDeleteTodo.emit(todo);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"./../../config\";\r\n\r\n.todo {\r\n  background: $primary-color;\r\n  margin: 2rem 2rem;\r\n  padding: 0 0.25rem;\r\n  cursor: pointer;\r\n  border-radius: 0.225rem;\r\n  -moz-box-shadow: 1px 6px 10px 4px rgba(0, 0, 0, 0.3);\r\n  -webkit-box-shadow: 1px 6px 10px 4px rgba(0, 0, 0, 0.3);\r\n  box-shadow: 1px 6px 10px 4px rgba(0, 0, 0, 0.3);\r\n\r\n  h3 {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    font-weight: 400;\r\n    padding: 0.5rem 1rem;\r\n  }\r\n\r\n  &__text {\r\n    width: 60%;\r\n    padding: 0.5rem;\r\n  }\r\n\r\n  p {\r\n    font-size: 0.75rem;\r\n    padding: 0.5rem;\r\n    width: 30%;\r\n    text-align: center;\r\n  }\r\n\r\n  .delete {\r\n    color: $text-color-secondary;\r\n    font-weight: 800;\r\n    width: 10%;\r\n    padding: 0.5rem;\r\n  }\r\n}\r\n\r\n.delete__transition-up__top {\r\n  margin: -2.75rem -100% 0 100% !important;\r\n  padding: 0;\r\n  font-size: 0;\r\n  opacity: 0 !important;\r\n  @include transition-ease;\r\n}\r\n\r\n.delete__transition-up__stack {\r\n  margin: -4.75rem -100% 0 100% !important;\r\n  font-size: 0;\r\n  opacity: 0 !important;\r\n  @include transition-ease;\r\n}\r\n\r\n.added__transition-up__start {\r\n  margin: 50% 50% 0 50%;\r\n  height: 0;\r\n  opacity: 0;\r\n}\r\n\r\n.added__transition-up__finished {\r\n  margin: 2rem 2rem;\r\n  height: auto;\r\n  opacity: 1;\r\n  @include transition-ease;\r\n}",
                    "styleUrl": "./todo.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 21
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div\n  [ngClass]=\"{ 'delete__transition-up__stack': deleteBtnClicked && !todo.top, \n  'delete__transition-up__top': deleteBtnClicked && todo.top, 'added__transition-up__start' : todo.added, 'added__transition-up__finished' : animationIsDelayed }\"\n  class=\"todo\"\n>\n  <h3>\n    <span class=\"todo__text\">{{ todo.text }}</span>\n    <p>{{ todo.day }}</p>\n    <span (click)=\"onDelete(todo)\" class=\"delete\"> x </span>\n  </h3>\n</div>\n"
        },
        {
            "name": "TodoListComponent",
            "id": "component-TodoListComponent-34b84e9874520f242c83a38ace460b41",
            "file": "src/app/components/todo-list/todo-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-todo-list",
            "styleUrls": [
                "./todo-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./todo-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "todos",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "Todo[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "deleteTodo",
                    "args": [
                        {
                            "name": "todo",
                            "type": "Todo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "todo",
                            "type": "Todo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { TodoService } from 'src/app/services/todo.service';\nimport { Todo } from 'src/app/Todo';\n\n@Component({\n  selector: 'app-todo-list',\n  templateUrl: './todo-list.component.html',\n  styleUrls: ['./todo-list.component.scss'],\n})\nexport class TodoListComponent implements OnInit {\n  @Input() todos: Todo[] = [];\n\n  constructor() {}\n\n  deleteTodo(todo: Todo) {\n    /**\n     * Give CSS some time to play delete animation.\n     */\n    setTimeout(() => {\n      this.todos.forEach((x, i) => {\n        if (x.id === todo.id) {\n          this.todos.splice(i, 1);          \n          if (i === 0) this.todos[0].top = true;\n        }\n      });\n    }, 1000);\n  }\n\n  ngOnInit(): void {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../config, ../../responsive\";\r\n\r\n.todo-list {\r\n  padding-bottom: 1.5rem;\r\n  padding-top: 6rem;\r\n  height: calc(100vh - 9rem);\r\n  overflow-y: scroll;\r\n}\r\n\r\n::-webkit-scrollbar-track {\r\n  padding: 2px 0;\r\n  background: linear-gradient(\r\n    to bottom,\r\n    rgba($secondary-color, 1),\r\n    rgba($primary-color, 1),\r\n    rgba($secondary-color, 1)\r\n  );\r\n}\r\n\r\n::-webkit-scrollbar {\r\n  width: 1rem;\r\n}\r\n\r\n::-webkit-scrollbar-thumb {\r\n  background: linear-gradient(\r\n    to bottom,\r\n    rgba($secondary-color, 1),\r\n    rgba($primary-color, 1),\r\n    rgba($secondary-color, 1)\r\n  );\r\n  border-left: 2px solid $text-color-secondary;\r\n}\r\n",
                    "styleUrl": "./todo-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"todo-list\">\n  <app-todo\n    *ngFor=\"let todo of todos\"\n    [todo]=\"todo\"\n    [todos]=\"todos\"\n    (onDeleteTodo)=\"deleteTodo(todo)\"\n  ></app-todo>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-99a20cdb8ccb2a9d4d955e10566bc560",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { FormComponent } from './components/form/form.component';\nimport { FormButtonComponent } from './components/form-button/form-button.component';\nimport { FormInputComponent } from './components/form-input/form-input.component';\nimport { TitleComponent } from './components/title/title.component';\nimport { TodoComponent } from './components/todo/todo.component';\nimport { TodoListComponent } from './components/todo-list/todo-list.component';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    FormComponent,\n    FormButtonComponent,\n    FormInputComponent,\n    TitleComponent,\n    TodoComponent,\n    TodoListComponent,\n  ],\n  imports: [BrowserModule, AppRoutingModule, FormsModule],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "FormButtonComponent"
                        },
                        {
                            "name": "FormComponent"
                        },
                        {
                            "name": "FormInputComponent"
                        },
                        {
                            "name": "TitleComponent"
                        },
                        {
                            "name": "TodoComponent"
                        },
                        {
                            "name": "TodoListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-3c1d721cfd0753406a1cfde101c59380",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "App",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/app.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Button",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/form-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "Form",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Input",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/form-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "List",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/todo-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/app.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<AppComponent>",
                "defaultValue": "(args: AppComponent) => ({\r\n  component: AppComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/form-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FormInputComponent>",
                "defaultValue": "(args: FormInputComponent) => ({\r\n  component: FormInputComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FormComponent>",
                "defaultValue": "(args: FormComponent) => ({\r\n  component: FormComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/form-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FormButtonComponent>",
                "defaultValue": "(args: FormButtonComponent) => ({\r\n  component: FormButtonComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/title.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TitleComponent>",
                "defaultValue": "(args: TitleComponent) => ({\r\n  component: TitleComponent,\r\n  props: args,\r\n  decorators: [\r\n    componentWrapperDecorator((story) => `<div style=\"position: relative !imporant\">${story}</div>`),\r\n  ],\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/todo.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TodoComponent>",
                "defaultValue": "(args: TodoComponent) => ({\r\n  component: TodoComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/todo-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TodoListComponent>",
                "defaultValue": "(args: TodoListComponent) => ({\r\n  component: TodoListComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "Title",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/title.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Todo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/todo.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "TODOS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/mock-todos.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Todo[]",
                "defaultValue": "[\r\n  {\r\n    id: 1,\r\n    text: 'Make to-do list.',\r\n    day: '11/17 @ 7:00 AM',\r\n    top: true,\r\n  },\r\n  {\r\n    id: 2,\r\n    text: 'Eat lunch.',\r\n    day: '11/18 @ 12:00 PM',\r\n  },\r\n  {\r\n    id: 3,\r\n    text: 'Doctor\\'s appointment.',\r\n    day: '11/19 @ 3:45 PM',\r\n  },\r\n]"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/stories/app.stories.ts": [
                {
                    "name": "App",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/app.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/app.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<AppComponent>",
                    "defaultValue": "(args: AppComponent) => ({\r\n  component: AppComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/form-button.stories.ts": [
                {
                    "name": "Button",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/form-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/form-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FormButtonComponent>",
                    "defaultValue": "(args: FormButtonComponent) => ({\r\n  component: FormButtonComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/stories/form.stories.ts": [
                {
                    "name": "Form",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FormComponent>",
                    "defaultValue": "(args: FormComponent) => ({\r\n  component: FormComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/form-input.stories.ts": [
                {
                    "name": "Input",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/form-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/form-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FormInputComponent>",
                    "defaultValue": "(args: FormInputComponent) => ({\r\n  component: FormInputComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/todo-list.stories.ts": [
                {
                    "name": "List",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/todo-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/todo-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TodoListComponent>",
                    "defaultValue": "(args: TodoListComponent) => ({\r\n  component: TodoListComponent,\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/title.stories.ts": [
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/title.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TitleComponent>",
                    "defaultValue": "(args: TitleComponent) => ({\r\n  component: TitleComponent,\r\n  props: args,\r\n  decorators: [\r\n    componentWrapperDecorator((story) => `<div style=\"position: relative !imporant\">${story}</div>`),\r\n  ],\r\n})"
                },
                {
                    "name": "Title",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/title.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/stories/todo.stories.ts": [
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/todo.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TodoComponent>",
                    "defaultValue": "(args: TodoComponent) => ({\r\n  component: TodoComponent,\r\n  props: args,\r\n})"
                },
                {
                    "name": "Todo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/todo.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/app/mock-todos.ts": [
                {
                    "name": "TODOS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/mock-todos.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Todo[]",
                    "defaultValue": "[\r\n  {\r\n    id: 1,\r\n    text: 'Make to-do list.',\r\n    day: '11/17 @ 7:00 AM',\r\n    top: true,\r\n  },\r\n  {\r\n    id: 2,\r\n    text: 'Eat lunch.',\r\n    day: '11/18 @ 12:00 PM',\r\n  },\r\n  {\r\n    id: 3,\r\n    text: 'Doctor\\'s appointment.',\r\n    day: '11/19 @ 3:45 PM',\r\n  },\r\n]"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/Todo.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Todo",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/form-button/form-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/form-input/form-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/form/form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/title/title.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TitleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/todo-list/todo-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TodoListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/todo/todo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TodoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/mock-todos.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TODOS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/todo.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TodoService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/services/ui.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UiService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/app.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "App",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/app.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/form-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Button",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/form-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/form-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Input",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/form-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Form",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/title.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/title.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Title",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/todo-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "List",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/todo-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/todo.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/todo.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Todo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}